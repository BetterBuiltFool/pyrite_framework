from __future__ import annotations

from abc import ABC, abstractmethod

from collections.abc import Sequence
import pathlib
from typing import Generic, TypeVar, TYPE_CHECKING

from pygame import Rect

MapKeyT = TypeVar("MapKeyT")

if TYPE_CHECKING:
    import os
    from collections.abc import Callable
    from typing import TextIO
    from pygame import Surface
    from pygame.typing import Point


def default_decoder(sprite_map_file: TextIO) -> dict[str, Rect]:
    sprites: dict[str, Rect] = {}
    for line in sprite_map_file.readlines():
        key, value = line.split("=")
        key = key.strip(" ")
        value = value.strip("\n")
        value = value.lstrip()
        values = [int(subvalue) for subvalue in value.split(" ")]
        sprites.update({key: Rect(*values)})
    return sprites


class SpriteMap(ABC, Generic[MapKeyT]):
    """
    A dictionary of rects for getting the subsurfaces for a spritesheet.
    """

    @abstractmethod
    def get(self, key: MapKeyT) -> Rect:
        """
        Returns a rect matching the provided key.

        :param key: Key values for the rect. Typing varies by implementation.
        :return: A rectangle representing the subsurface of the spritesheet.
        """
        pass

    @staticmethod
    def from_rows(
        number_rows: int, number_columns, sprite_size: Point
    ) -> SimpleSpriteMap:
        """
        Creates a SimpleSpriteMap with constant sprite size.

        'get' key is a row, column tuple.

        :param number_rows: The number of rows in the sprite map (y value)
        :param number_columns: The number of columns in the sprite map (x value)
        :param sprite_size: The size of the final sprites. All sprites generated by
        this spritemap will have that size.
        :return: SimpleSpriteMap with the provided attributes.
        """

        return SimpleSpriteMap(number_rows, number_columns, sprite_size)

    @staticmethod
    def from_dict(rect_dict: dict[str, Rect]) -> DictSpriteMap:
        """
        Creates a DictSpriteMap from the provided dict of rectangles.

        :param rect_dict: A dictionary with strings for keys and pygame Rectangles as
        values.
        :return: A sprite map based on the provided dict.
        """

        return DictSpriteMap(rect_dict)

    @staticmethod
    def from_file(
        spritesheet_map_file: TextIO, decoder: Callable | None = None
    ) -> DictSpriteMap:
        """
        Creates a DictSpriteMap from the provided file.
        The decoder must take a file-like object, and return a dictionary with string
        keys and pygame rectangles as values.

        The default decoder function assumes a layout where each subrect is on its own
        line, with no blank lines, and each line takes the form of "[key] = x y w h"

        :param spritesheet_map_file: File or file-like object from which the decoder
        will convert into a dict
        :param decoder: A callable that can read the specified file and turn it into a
        dict.
        :return: A DictSpriteMap based on the data from the supplied file.
        """

        # this is really just to allow creating a spritemap from file without needing
        # to import the specific class.
        return DictSpriteMap.from_file(spritesheet_map_file, decoder)

    @staticmethod
    def from_path(
        spritesheet_map_path: os.PathLike | str, decoder: Callable | None = None
    ) -> DictSpriteMap:
        """
        Opens the files at the specified location, and creates a DictSpriteMap from it,
        using a supplied decoder function.
        The decoder must take a file-like object, and return a dictionary with string
        keys and pygame rectangles as values.

        The default decoder function assumes a layout where each subrect is on its own
        line, with no blank lines, and each line takes the form of "[key] = x y w h"

        :param spritesheet_map_file: File or file-like object from which the decoder
        will convert into a dict
        :param decoder: A callable that can read the specified file and turn it into a
        dict.
        :return: A DictSpriteMap based on the data from the supplied file.
        """
        return DictSpriteMap.from_path(spritesheet_map_path, decoder)


class SimpleSpriteMap(SpriteMap[Sequence[int]]):
    """
    Version of SpriteMap that uses rows and columns and a constant size for each
    sprite.

    Takes keys as tuples of row, column
    """

    def __init__(self, number_rows: int, number_columns, sprite_size: Point) -> None:
        """
        Creates a sprite map with a given number of rows and columns, and a fixed
        sprite size.

        :param number_rows: The number of rows in the sprite map (y value)
        :param number_columns: The number of columns in the sprite map (x value)
        :param sprite_size: The size of the final sprites. All sprites generated by
        this spritemap will have that size.
        """
        sprite_width, sprite_height = sprite_size
        self._map = [
            [
                Rect(
                    column * sprite_width,
                    row * sprite_height,
                    sprite_width,
                    sprite_height,
                )
                for column in range(number_columns)
            ]
            for row in range(number_rows)
        ]
        self.sprite_size = sprite_size

    def get(self, key: Sequence[int] | None) -> Rect:
        if key is None:
            key = (0, 0)
        row, column = key
        return self._map[row][column]


class DictSpriteMap(SpriteMap[MapKeyT]):
    """
    Version of SpriteMap that uses a dictionary of Rects. Can be generated from file.
    """

    def __init__(self, string_dict: dict[MapKeyT, Rect]) -> None:
        self._map = string_dict

    @staticmethod
    def from_file(
        spritesheet_map_file: TextIO, decoder: Callable | None = None
    ) -> DictSpriteMap:
        """
        Creates a DictSpriteMap from a text file, using a supplied decoder function.
        The decoder must take a file-like object, and return a dictionary with string
        keys and pygame rectangles as values.

        The default decoder function assumes a layout where each subrect is on its own
        line, with no blank lines, and each line takes the form of "[key] = x y w h"

        :param spritesheet_map_file: File or file-like object from which the decoder
        will convert into a dict
        :param decoder: A callable that can read the specified file and turn it into a
        dict.
        :return: A DictSpriteMap based on the data from the supplied file.
        """
        if not decoder:

            decoder = default_decoder

        map_dict = decoder(spritesheet_map_file)
        return DictSpriteMap(map_dict)

    @staticmethod
    def from_path(
        spritesheet_map_path: os.PathLike | str, decoder: Callable | None = None
    ) -> DictSpriteMap:
        """
        Opens the files at the specified location, and creates a DictSpriteMap from it,
        using a supplied decoder function.
        The decoder must take a file-like object, and return a dictionary with string
        keys and pygame rectangles as values.

        The default decoder function assumes a layout where each subrect is on its own
        line, with no blank lines, and each line takes the form of "[key] = x y w h"

        :param spritesheet_map_file: File or file-like object from which the decoder
        will convert into a dict
        :param decoder: A callable that can read the specified file and turn it into a
        dict.
        :return: A DictSpriteMap based on the data from the supplied file.
        """

        path = pathlib.Path(spritesheet_map_path)
        with open(path) as spritemap_file:
            return DictSpriteMap.from_file(spritemap_file, decoder)

    def get(self, key: MapKeyT) -> Rect:
        return self._map[key]


class SpriteSheet(Generic[MapKeyT]):
    """
    A tool that can select subsections of a larger surface for display.
    Useful for animations, or otherwise collecting multiple images
    into one larger surface.

    Requires a SpriteMap.
    """

    def __init__(
        self,
        reference_sprite: Surface,
        sprite_map: SpriteMap,
        start_state: MapKeyT | None = None,
    ) -> None:
        """
        Creates a new Spritesheet.

        :param reference_sprite: The reference surface containing all of the subsurfaces
        needed. As a reference, can be shared by multiple sprite sheets.
        :param sprite_map: A SpriteMap of any type, containing the Rect coordinates of
        all of the subsurfaces.
        :param start_state: The initial state of the SpriteSheet. None allows the
        SpriteMap to choose. Defaults to None.
        """
        self._reference_sprite = reference_sprite
        self.sprite_map = sprite_map

        self._sprite_key = start_state

    @property
    def sprite_key(self) -> MapKeyT | None:
        """
        A value used by the SpriteMap to select the subsurface to be displayed.

        Type matches the type of the key used by the chosen SpriteMap.
        """
        return self._sprite_key

    def get_sprite(self, sprite_key: MapKeyT | None = None) -> Surface | None:
        """
        Gets the sprite image that matches the given key, updating the stored key.
        Returns the sprite image that matches the key.

        If no key is supplied, returns the image that matches the current key.

        If no surface is available, returns None.

        :param sprite_key: The key used to determine the subrect of the desired sprite
        image, defaults to None
        :return: The subsurface matching the sprite key, or None if the key is not
        valid.
        """
        sprite_key = sprite_key if sprite_key is not None else self._sprite_key
        self._sprite_key = sprite_key
        return self.get_subsurface(sprite_key)

    def get_subsurface(self, sprite_key: MapKeyT | None = None) -> Surface:
        """
        Gets a subsurface of the reference sheet based on the supplied sprite_key.
        Does not change the state of the sprite sheet.

        If the key is invalid, returns the subsurface for the default key (fail safe).

        :param sprite_key: Key value appropriate for the spritesheet's SpriteMap
        :return: The subsurface matching the sprite key, or matching the default key if
            invalid.
        """
        rect = self.sprite_map.get(sprite_key)
        return self._reference_sprite.subsurface(rect)
